// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/code-ready/crc/pkg/crc/constants"
	"github.com/code-ready/crc/pkg/download"

	"github.com/code-ready/crc/pkg/crc/machine/hyperkit"
	"github.com/code-ready/crc/pkg/crc/machine/libvirt"
)

const (
	blobFileName string = "blob"
)

// Define vars for build template
var conv = map[string]interface{}{"conv": fmtByteSlice}
var tmpl = template.Must(template.New("").Funcs(conv).Parse(`package embed

// Code generated by go generate; DO NOT EDIT.

func init() {
    {{- range $name, $file := . }}
        Add("{{ $name }}", []byte("{{ conv $file }}"))
    {{- end }}
}`),
)

func fmtByteSlice(s []byte) string {
	builder := strings.Builder{}

	for _, v := range s {
		// https://github.com/golang/go/issues/6643
		builder.WriteString(fmt.Sprintf("\\x%02x", int(v)))
	}

	return builder.String()
}

func main() {
	embedFolder, err := ioutil.TempDir("", "crc-data")
	if err != nil {
		log.Fatal("Error creating temp directory:", err)
	}
	defer os.RemoveAll(embedFolder)

	// Download platform specific embedded files
	downloadedFiles, err := downloadDataFiles(os.Getenv("TARGET_OS"), embedFolder)
	if err != nil {
		log.Fatal("Error downloading embedded files", err)
	}

	// Create map for filenames
	binFileData := make(map[string][]byte)

	// Adding downloaded files to map (filename maps to file-content)
	for _, f := range downloadedFiles {
		fileName := filepath.Base(f)
		log.Printf("Packing %s in...\n", fileName)

		b, err := ioutil.ReadFile(f)
		if err != nil {
			log.Fatalf("Error reading %s: %s", f, err)
		}
		// Add file name to map
		binFileData[fileName] = b
	}

	generatedFileName := fmt.Sprintf("%s_%s.go", blobFileName, os.Getenv("TARGET_OS"))

	// Create buffer
	builder := &bytes.Buffer{}

	// Execute template
	if err = tmpl.Execute(builder, binFileData); err != nil {
		log.Fatal("Error executing template", err)
	}

	// Formatting generated code
	data, err := format.Source(builder.Bytes())
	if err != nil {
		log.Fatal("Error formatting generated code", err)
	}

	// Writing blob file
	if err = ioutil.WriteFile(generatedFileName, data, os.ModePerm); err != nil {
		log.Fatal("Error writing blob file", err)
	}
}

var (
	dataFileUrls = map[string][]string{
		"darwin": {
			hyperkit.MachineDriverDownloadURL,
			hyperkit.HyperKitDownloadURL,
			constants.GetCRCMacTrayDownloadURL(),
			constants.GetAdminHelperURLForOs("darwin"),
		},
		"linux": {
			libvirt.MachineDriverDownloadURL,
			constants.GetAdminHelperURLForOs("linux"),
		},
		"windows": {
			constants.GetAdminHelperURLForOs("windows"),
			constants.GetCRCWindowsTrayDownloadURL(),
		},
	}
)

func downloadDataFiles(goos string, destDir string) ([]string, error) {
	downloadedFiles := []string{}
	downloads := dataFileUrls[goos]
	for _, url := range downloads {
		filename, err := download.Download(url, destDir, 0644)
		if err != nil {
			return nil, err
		}
		downloadedFiles = append(downloadedFiles, filename)
	}
	return downloadedFiles, nil
}
